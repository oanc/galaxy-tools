import static org.lappsgrid.discriminator.Discriminators.Uri
import groovy.json.JsonOutput

File input = new File(args[0])
File output = new File(args[1])

class DataContainer extends Data<Container> {}
Data<Container> data = Serializer.parse(input.text, DataContainer)
Container container = data.payload

List<View> views = container.findViewsThatContain(Uri.TOKEN)
if (views == null || views.size() == 0) {
	println "No views with tokens found."
	return
}

if (views.size() > 1) {
	println "More than one view contains tokens."
	return
}

def isaWord = { it ->
	return (it.label == Uri.TOKEN || it.type == Uri.TOKEN) && (it.features.tokenType == 'word')
}

List<Annotation> annotations = views[0].annotations.findAll { isaWord(it) }

def counts = [:]
annotations.each { annotation ->
	String word = annotation?.features.word //?: annotation?.features.lemma
	if (!word) {
		int start = annotation.start
		int end = annotation.end
		word = container.text.substring(start, end)		
	}
	word = word.toLowerCase()
	Counter counter = counts[word]
	if (!counter) {
		counter = new Counter(word)
		counts[word] = counter
	}
	counter.increment()
}

output.withWriter { writer ->
	counts.values().sort { it.count }.reverse().each { row ->
		writer.println "${row.word}\t${row.count}"
	}
}

class Counter {
	String word
	int count
	
	Counter(String word) {
		this.word = word
		this.count = 0
	}
	
	void increment() { ++count }
}